# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: util/status.proto
# Protobuf Python Version: 4.25.0
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import any_pb2 as google_dot_protobuf_dot_any__pb2
from util import code_pb2 as util_dot_code__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x11util/status.proto\x12\ngoogle.rpc\x1a\x19google/protobuf/any.proto\x1a\x0futil/code.proto\"`\n\x06Status\x12\x1e\n\x04\x63ode\x18\x01 \x01(\x0e\x32\x10.google.rpc.Code\x12\x0f\n\x07message\x18\x02 \x01(\t\x12%\n\x07\x64\x65tails\x18\x03 \x03(\x0b\x32\x14.google.protobuf.AnyB^\n\x0e\x63om.google.rpcB\x0bStatusProtoP\x01Z7google.golang.org/genproto/googleapis/rpc/status;status\xa2\x02\x03RPCb\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'util.status_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:
  _globals['DESCRIPTOR']._options = None
  _globals['DESCRIPTOR']._serialized_options = b'\n\016com.google.rpcB\013StatusProtoP\001Z7google.golang.org/genproto/googleapis/rpc/status;status\242\002\003RPC'
  _globals['_STATUS']._serialized_start=77
  _globals['_STATUS']._serialized_end=173
Status.__doc__ = """The `Status` type defines a logical error model that is suitable for
different programming environments, including REST APIs and RPC APIs.
It is used by [gRPC](https://github.com/grpc). The error model is
designed to be:  - Simple to use and understand for most users -
Flexible enough to meet unexpected needs  # Overview  The `Status`
message contains three pieces of data: error code, error message, and
error details. The error code should be an enum value of
[google.rpc.Code][google.rpc.Code], but it may accept additional error
codes if needed.  The error message should be a developer-facing
English message that helps developers *understand* and *resolve* the
error. If a localized user-facing error message is needed, put the
localized message in the error details or localize it in the client.
The optional error details may contain arbitrary information about the
error. There is a predefined set of error detail types in the package
`google.rpc` which can be used for common error conditions.  #
Language mapping  The `Status` message is the logical representation
of the error model, but it is not necessarily the actual wire format.
When the `Status` message is exposed in different client libraries and
different wire protocols, it can be mapped differently. For example,
it will likely be mapped to some exceptions in Java, but more likely
mapped to some error codes in C.  # Other uses  The error model and
the `Status` message can be used in a variety of environments, either
with or without APIs, to provide a consistent developer experience
across different environments.  Example uses of this error model
include:  - Partial errors. If a service needs to return partial
errors to the client,     it may embed the `Status` in the normal
response to indicate the partial     errors.  - Workflow errors. A
typical workflow has multiple steps. Each step may     have a `Status`
message for error reporting purpose.  - Batch operations. If a client
uses batch request and batch response, the     `Status` message should
be used directly inside batch response, one for     each error sub-
response.  - Asynchronous operations. If an API call embeds
asynchronous operation     results in its response, the status of
those operations should be     represented directly using the `Status`
message.  - Logging. If some API errors are stored in logs, the
message `Status` could     be used directly after any stripping needed
for security/privacy reasons.

Attributes:
    code:
        The status code, which should be an enum value of
        [google.rpc.Code][google.rpc.Code].
    message:
        A developer-facing error message, which should be in English.
        Any user-facing error message should be localized and sent in
        the [google.rpc.Status.details][google.rpc.Status.details]
        field, or localized by the client.
    details:
        A list of messages that carry the error details.  There will
        be a common set of message types for APIs to use.
"""
# @@protoc_insertion_point(module_scope)
