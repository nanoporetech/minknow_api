# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from minknow_api import instance_pb2 as minknow__api_dot_instance__pb2
from minknow_api import manager_pb2 as minknow__api_dot_manager__pb2


class ManagerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.describe_host = channel.unary_unary(
                '/minknow_api.manager.ManagerService/describe_host',
                request_serializer=minknow__api_dot_manager__pb2.DescribeHostRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.DescribeHostResponse.FromString,
                )
        self.get_basecaller_features = channel.unary_unary(
                '/minknow_api.manager.ManagerService/get_basecaller_features',
                request_serializer=minknow__api_dot_manager__pb2.GetBasecallerFeaturesRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.GetBasecallerFeaturesResponse.FromString,
                )
        self.flow_cell_positions = channel.unary_stream(
                '/minknow_api.manager.ManagerService/flow_cell_positions',
                request_serializer=minknow__api_dot_manager__pb2.FlowCellPositionsRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.FlowCellPositionsResponse.FromString,
                )
        self.watch_flow_cell_positions = channel.unary_stream(
                '/minknow_api.manager.ManagerService/watch_flow_cell_positions',
                request_serializer=minknow__api_dot_manager__pb2.WatchFlowCellPositionsRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.WatchFlowCellPositionsResponse.FromString,
                )
        self.reset_position = channel.unary_unary(
                '/minknow_api.manager.ManagerService/reset_position',
                request_serializer=minknow__api_dot_manager__pb2.ResetPositionRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.ResetPositionResponse.FromString,
                )
        self.basecaller_api = channel.unary_unary(
                '/minknow_api.manager.ManagerService/basecaller_api',
                request_serializer=minknow__api_dot_manager__pb2.BasecallerApiRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.BasecallerApiResponse.FromString,
                )
        self.get_guppy_info = channel.unary_unary(
                '/minknow_api.manager.ManagerService/get_guppy_info',
                request_serializer=minknow__api_dot_manager__pb2.GetGuppyInfoRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.GetGuppyInfoResponse.FromString,
                )
        self.get_version_info = channel.unary_unary(
                '/minknow_api.manager.ManagerService/get_version_info',
                request_serializer=minknow__api_dot_manager__pb2.GetVersionInfoRequest.SerializeToString,
                response_deserializer=minknow__api_dot_instance__pb2.GetVersionInfoResponse.FromString,
                )
        self.list_protocol_output_dir_files = channel.unary_stream(
                '/minknow_api.manager.ManagerService/list_protocol_output_dir_files',
                request_serializer=minknow__api_dot_manager__pb2.ListProtocolOutputDirFilesRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.ListProtocolOutputDirFilesResponse.FromString,
                )
        self.create_directory = channel.unary_unary(
                '/minknow_api.manager.ManagerService/create_directory',
                request_serializer=minknow__api_dot_manager__pb2.CreateDirectoryRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.CreateDirectoryResponse.FromString,
                )
        self.get_disk_space_info = channel.unary_unary(
                '/minknow_api.manager.ManagerService/get_disk_space_info',
                request_serializer=minknow__api_dot_manager__pb2.GetDiskSpaceInfoRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.GetDiskSpaceInfoResponse.FromString,
                )
        self.get_default_output_directories = channel.unary_unary(
                '/minknow_api.manager.ManagerService/get_default_output_directories',
                request_serializer=minknow__api_dot_instance__pb2.GetDefaultOutputDirectoriesRequest.SerializeToString,
                response_deserializer=minknow__api_dot_instance__pb2.OutputDirectories.FromString,
                )
        self.stream_disk_space_info = channel.unary_stream(
                '/minknow_api.manager.ManagerService/stream_disk_space_info',
                request_serializer=minknow__api_dot_manager__pb2.StreamDiskSpaceInfoRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.GetDiskSpaceInfoResponse.FromString,
                )
        self.get_barcode_kit_info = channel.unary_unary(
                '/minknow_api.manager.ManagerService/get_barcode_kit_info',
                request_serializer=minknow__api_dot_manager__pb2.GetBarcodeKitInfoRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.GetBarcodeKitInfoResponse.FromString,
                )
        self.get_lamp_kit_info = channel.unary_unary(
                '/minknow_api.manager.ManagerService/get_lamp_kit_info',
                request_serializer=minknow__api_dot_manager__pb2.GetLampKitInfoRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.GetLampKitInfoResponse.FromString,
                )
        self.get_barcode_keys = channel.unary_unary(
                '/minknow_api.manager.ManagerService/get_barcode_keys',
                request_serializer=minknow__api_dot_manager__pb2.GetBarcodeKeysRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.GetBarcodeKeysResponse.FromString,
                )
        self.get_flow_cell_types = channel.unary_unary(
                '/minknow_api.manager.ManagerService/get_flow_cell_types',
                request_serializer=minknow__api_dot_manager__pb2.GetFlowCellTypesRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.GetFlowCellTypesResponse.FromString,
                )
        self.get_sequencing_kits = channel.unary_unary(
                '/minknow_api.manager.ManagerService/get_sequencing_kits',
                request_serializer=minknow__api_dot_manager__pb2.GetSequencingKitsRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.GetSequencingKitsResponse.FromString,
                )
        self.add_simulated_device = channel.unary_unary(
                '/minknow_api.manager.ManagerService/add_simulated_device',
                request_serializer=minknow__api_dot_manager__pb2.AddSimulatedDeviceRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.AddSimulatedDeviceResponse.FromString,
                )
        self.remove_simulated_device = channel.unary_unary(
                '/minknow_api.manager.ManagerService/remove_simulated_device',
                request_serializer=minknow__api_dot_manager__pb2.RemoveSimulatedDeviceRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.RemoveSimulatedDeviceResponse.FromString,
                )
        self.local_authentication_token_path = channel.unary_unary(
                '/minknow_api.manager.ManagerService/local_authentication_token_path',
                request_serializer=minknow__api_dot_manager__pb2.LocalAuthenticationTokenPathRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.LocalAuthenticationTokenPathResponse.FromString,
                )
        self.get_alignment_reference_information = channel.unary_unary(
                '/minknow_api.manager.ManagerService/get_alignment_reference_information',
                request_serializer=minknow__api_dot_manager__pb2.GetAlignmentReferenceInformationRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.GetAlignmentReferenceInformationResponse.FromString,
                )
        self.association_device_code = channel.unary_unary(
                '/minknow_api.manager.ManagerService/association_device_code',
                request_serializer=minknow__api_dot_manager__pb2.AssociationDeviceCodeRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.AssociationDeviceCodeResponse.FromString,
                )
        self.apply_offline_association_unlock_code = channel.unary_unary(
                '/minknow_api.manager.ManagerService/apply_offline_association_unlock_code',
                request_serializer=minknow__api_dot_manager__pb2.ApplyOfflineAssociationUnlockCodeRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.ApplyOfflineAssociationUnlockCodeResponse.FromString,
                )
        self.list_developer_api_tokens = channel.unary_unary(
                '/minknow_api.manager.ManagerService/list_developer_api_tokens',
                request_serializer=minknow__api_dot_manager__pb2.ListDeveloperApiTokensRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.ListDeveloperApiTokensResponse.FromString,
                )
        self.create_developer_api_token = channel.unary_unary(
                '/minknow_api.manager.ManagerService/create_developer_api_token',
                request_serializer=minknow__api_dot_manager__pb2.CreateDeveloperApiTokenRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.CreateDeveloperApiTokenResponse.FromString,
                )
        self.revoke_developer_api_token = channel.unary_unary(
                '/minknow_api.manager.ManagerService/revoke_developer_api_token',
                request_serializer=minknow__api_dot_manager__pb2.RevokeDeveloperApiTokenRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.RevokeDeveloperApiTokensResponse.FromString,
                )
        self.find_protocols = channel.unary_unary(
                '/minknow_api.manager.ManagerService/find_protocols',
                request_serializer=minknow__api_dot_manager__pb2.FindProtocolsRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.FindProtocolsResponse.FromString,
                )
        self.list_settings_for_protocol = channel.unary_unary(
                '/minknow_api.manager.ManagerService/list_settings_for_protocol',
                request_serializer=minknow__api_dot_manager__pb2.ListSettingsForProtocolRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.ListSettingsForProtocolResponse.FromString,
                )
        self.get_features = channel.unary_unary(
                '/minknow_api.manager.ManagerService/get_features',
                request_serializer=minknow__api_dot_manager__pb2.GetFeaturesRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.GetFeaturesResponse.FromString,
                )
        self.set_features = channel.unary_unary(
                '/minknow_api.manager.ManagerService/set_features',
                request_serializer=minknow__api_dot_manager__pb2.SetFeaturesRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.SetFeaturesResponse.FromString,
                )
        self.restart_device_admin_service = channel.unary_unary(
                '/minknow_api.manager.ManagerService/restart_device_admin_service',
                request_serializer=minknow__api_dot_manager__pb2.RestartDeviceAdminRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.RestartDeviceAdminResponse.FromString,
                )
        self.check_bed_file = channel.unary_unary(
                '/minknow_api.manager.ManagerService/check_bed_file',
                request_serializer=minknow__api_dot_manager__pb2.CheckBedFileRequest.SerializeToString,
                response_deserializer=minknow__api_dot_manager__pb2.CheckBedFileResponse.FromString,
                )


class ManagerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def describe_host(self, request, context):
        """Get information about the machine running MinKNOW.

        This RPC can be called without providing any authentication tokens.

        Since 3.6
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_basecaller_features(self, request, context):
        """Get features from the basecaller, for whether the server can support live basecalling with adaptive sampling

        Since 5.9
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def flow_cell_positions(self, request, context):
        """List all known positions where flow cells can be inserted.

        Provides a snapshot of places where users can insert flow cells. It has a streamed response
        in case there are too many positions to fit into a single response, but normally there should
        only be a single response.

        This RPC can be called without providing any authentication tokens.

        Since 3.6
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def watch_flow_cell_positions(self, request, context):
        """Watch for changes in flow cell position availability and state.

        This is like flow_cell_positions, but updates are streamed as positions come and go (eg:
        MinIONs being plugged or unplugged), or their status otherwise changes.

        This RPC can be called without providing any authentication tokens.

        Since 3.6
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reset_position(self, request, context):
        """Reset a flow cell position.

        If the hardware is in an error state or has been removed and the software is running, it will
        stop the software (causing the position to be forgotten if the hardware was removed).

        If the hardware is not in an error state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def basecaller_api(self, request, context):
        """Get the connection information for the basecaller API.

        This is the service that implements the minknow_api.basecaller interface for basecalling
        reads files.

        This RPC can be called without providing any authentication tokens.

        Since 3.5
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_guppy_info(self, request, context):
        """Get information about the basecaller, including the port to connect to it on.

        Since 4.1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_version_info(self, request, context):
        """Current version information includes:
        - Minknow version
        - Protocols version (i.e. Bream-4 version)
        - Configuration version (i.e. Wanda version)
        - Distribution version
        - Basecaller version

        This RPC can be called without providing any authentication tokens.

        See also: instance.get_version_info which provides some similar information on a per instance basis.
        Since 3.3
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_protocol_output_dir_files(self, request, context):
        """Returns all the files that are within the protocol output dir specified in the user_conf - or a descendant of that directory
        if `path` is supplied in the request.

        INVALID_ARGUMENT will be returned if the `path` argument in the request is not a descendant of the protocol output directory

        NOT_FOUND will be returned if the path does not exist. 'The path' being either the protocol output directory if the `path` argument is not specified
        or a valid `path` argument is specified but does not exist.

        Since 3.5
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_directory(self, request, context):
        """Create a directory within the protocol output directory tree.

        Errors:
        INVALID_ARGUMENT will be returned if the parent path (where the directory is requested to
        be created) is not within the protocol output directory, or if invalid characters are
        in the requested directory name.

        FAILED_PRECONDITION will be returned if the parent path is not a directory.

        NOT_FOUND will be returned if the parent path does not exist.

        ALREADY_EXISTS will be returned if the directory exists and is not a directory (if the
        directory already exists, this is treated as success).

        The possible valid parent paths can be determined using list_protocol_output_dir_files().

        Since 3.6
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_disk_space_info(self, request, context):
        """Returns information about the amount of disk space available, how much
        space is needed to stop an experiment cleanly and if MinKNOW thinks
        that the free disk-space is approaching or past this limit

        Since 3.7
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_default_output_directories(self, request, context):
        """As with `instance.get_default_output_directories`, this will return the
        paths that are defined in the config used when an instance of minknow
        is started.

        Since 4.3
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stream_disk_space_info(self, request, context):
        """Stream information about the amount of disk space available, how quickly
        it is being used, how much space is needed to stop an experiment cleanly
        and if MinKNOW thinks that the free disk-space is approaching or past
        this limit

        Since 4.0
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_barcode_kit_info(self, request, context):
        """Get info about all available barcoding kits

        Since 4.1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_lamp_kit_info(self, request, context):
        """Get info about all available lamp kits

        Since 4.1

        DEPRECATED 6.0: Lamp support has been removed and this response will always be empty.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_barcode_keys(self, request, context):
        """List all barcode keys associated with the specified barcoding kits

        Since 4.1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_flow_cell_types(self, request, context):
        """List all known types of flow cell.

        The primary purpose of this RPC is to provide a list of flow cell types for a user to select
        from (although most flow cells are capable of telling MinKNOW their product code, making user
        selection unnecessary).

        A secondary benefit of this call is it allows extra information about flow cell types to be
        given.

        Since 4.1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_sequencing_kits(self, request, context):
        """List all known sequencing kits.

        The intention is to provide a list of sequencing kits for a user to select from, plus extra
        information that can be used to filter that list.

        Since 4.1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_simulated_device(self, request, context):
        """Creates a simulated device of the type your system is configured for

        Since 4.3
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remove_simulated_device(self, request, context):
        """Removes a simulated device

        Since 4.3
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def local_authentication_token_path(self, request, context):
        """Get the path for the local authentication token.

        This RPC is only useful when connecting to MinKNOW from the same computer that MinKNOW is
        running on (ie: connecting to "localhost"). If this file exists (which it should if MinKNOW's
        guest mode is not completely disabled), it contains a description of a token that can be used
        to connect to MinKNOW. This is most useful when MinKNOW's guest mode is set to "local_only",
        as it certifies that the client is connecting from the local machine. If the guest mode is
        set to "enabled", no token is required to connect.

        The contents of the file is a json object with two fields, "token" and "expires". "token" is
        the string that can be passed in a "local-auth" gRPC authentication metadata field, while
        "expires" gives the time the token will expire (in RFC3339 format). Note that a new token
        will be written out shortly before this time (and, in fact, the token will be accepted a
        short time after).


        An example token file is::

        {
        "token": "30fe5214-a7c5-4cb3-b521-b1ec8a49592a",
        "expires": "2020-12-18T14:26:12.021934+00:00"
        }

        To connect before 14:26:12.021934 on 2020-12-18, a client would set the metadata field
        "local-auth" to "30fe5214-a7c5-4cb3-b521-b1ec8a49592a". At around 14:26:12, the client should
        re-read the file and update the metadata field with the newly-read value.

        This RPC can be called without providing any authentication tokens.

        Since 4.2
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_alignment_reference_information(self, request, context):
        """Query information about a reference file.

        Reference file types are picked up by extension:
        for fasta: .fasta, .fna, .ffn, .faa, .frn
        for mmi: .mmi

        Since 4.4
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def association_device_code(self, request, context):
        """Get the device code/key for association.

        DEPRECATED since 6.2 device association is no-longer required. This RPC will return UNIMPLEMENTED.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def apply_offline_association_unlock_code(self, request, context):
        """Apply the unlock code for offline association.

        DEPRECATED since 6.2 device association is no-longer required. This RPC will return UNIMPLEMENTED.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_developer_api_tokens(self, request, context):
        """List all developer API tokens.

        List all developer tokens, and their expiry times. Note this does not return the actual token value - this is only available at creation time.

        Since 4.4

        DEPRECATED since 5.6. Use client TLS certificates instead (see AUTH.md).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_developer_api_token(self, request, context):
        """Create a new developer API token, with a user facing name, and optional expiry time.

        The response contains the requested token, which will be valid until provided expiry time.

        The token cannot be obtained a second time, once the CreateDeveloperApiTokenResponse is destroyed.

        Since 4.4

        DEPRECATED since 5.6. Use client TLS certificates instead (see AUTH.md).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def revoke_developer_api_token(self, request, context):
        """Remove a developer api token.

        Since 4.4

        DEPRECATED since 5.6. Use client TLS certificates instead (see AUTH.md).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def find_protocols(self, request, context):
        """Find protocols which can be run based on the current device + flowcell.

        Throws an error if there is no flow cell connected.

        Since 4.5
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_settings_for_protocol(self, request, context):
        """Given a protocol and some information about the flow-cell and kits will provide a list
        of settings required by the protocol, their defaults and dependencies.

        Since 4.5 (moved from ProtocolService)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_features(self, request, context):
        """Get the status of BETA/experimental features
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_features(self, request, context):
        """Change whether features are enabled or disabled
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def restart_device_admin_service(self, request, context):
        """Forcibly halt and restart any MinKNOW-related device administration services, such as Mooneye.

        Since 6.0
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check_bed_file(self, request, context):
        """Checks the validity of a BED file against a corresponding index or genome file

        Errors:
        INVALID_ARGUMENT if the bed_file_path or index_file_path is empty

        Since 6.1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'describe_host': grpc.unary_unary_rpc_method_handler(
                    servicer.describe_host,
                    request_deserializer=minknow__api_dot_manager__pb2.DescribeHostRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.DescribeHostResponse.SerializeToString,
            ),
            'get_basecaller_features': grpc.unary_unary_rpc_method_handler(
                    servicer.get_basecaller_features,
                    request_deserializer=minknow__api_dot_manager__pb2.GetBasecallerFeaturesRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.GetBasecallerFeaturesResponse.SerializeToString,
            ),
            'flow_cell_positions': grpc.unary_stream_rpc_method_handler(
                    servicer.flow_cell_positions,
                    request_deserializer=minknow__api_dot_manager__pb2.FlowCellPositionsRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.FlowCellPositionsResponse.SerializeToString,
            ),
            'watch_flow_cell_positions': grpc.unary_stream_rpc_method_handler(
                    servicer.watch_flow_cell_positions,
                    request_deserializer=minknow__api_dot_manager__pb2.WatchFlowCellPositionsRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.WatchFlowCellPositionsResponse.SerializeToString,
            ),
            'reset_position': grpc.unary_unary_rpc_method_handler(
                    servicer.reset_position,
                    request_deserializer=minknow__api_dot_manager__pb2.ResetPositionRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.ResetPositionResponse.SerializeToString,
            ),
            'basecaller_api': grpc.unary_unary_rpc_method_handler(
                    servicer.basecaller_api,
                    request_deserializer=minknow__api_dot_manager__pb2.BasecallerApiRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.BasecallerApiResponse.SerializeToString,
            ),
            'get_guppy_info': grpc.unary_unary_rpc_method_handler(
                    servicer.get_guppy_info,
                    request_deserializer=minknow__api_dot_manager__pb2.GetGuppyInfoRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.GetGuppyInfoResponse.SerializeToString,
            ),
            'get_version_info': grpc.unary_unary_rpc_method_handler(
                    servicer.get_version_info,
                    request_deserializer=minknow__api_dot_manager__pb2.GetVersionInfoRequest.FromString,
                    response_serializer=minknow__api_dot_instance__pb2.GetVersionInfoResponse.SerializeToString,
            ),
            'list_protocol_output_dir_files': grpc.unary_stream_rpc_method_handler(
                    servicer.list_protocol_output_dir_files,
                    request_deserializer=minknow__api_dot_manager__pb2.ListProtocolOutputDirFilesRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.ListProtocolOutputDirFilesResponse.SerializeToString,
            ),
            'create_directory': grpc.unary_unary_rpc_method_handler(
                    servicer.create_directory,
                    request_deserializer=minknow__api_dot_manager__pb2.CreateDirectoryRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.CreateDirectoryResponse.SerializeToString,
            ),
            'get_disk_space_info': grpc.unary_unary_rpc_method_handler(
                    servicer.get_disk_space_info,
                    request_deserializer=minknow__api_dot_manager__pb2.GetDiskSpaceInfoRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.GetDiskSpaceInfoResponse.SerializeToString,
            ),
            'get_default_output_directories': grpc.unary_unary_rpc_method_handler(
                    servicer.get_default_output_directories,
                    request_deserializer=minknow__api_dot_instance__pb2.GetDefaultOutputDirectoriesRequest.FromString,
                    response_serializer=minknow__api_dot_instance__pb2.OutputDirectories.SerializeToString,
            ),
            'stream_disk_space_info': grpc.unary_stream_rpc_method_handler(
                    servicer.stream_disk_space_info,
                    request_deserializer=minknow__api_dot_manager__pb2.StreamDiskSpaceInfoRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.GetDiskSpaceInfoResponse.SerializeToString,
            ),
            'get_barcode_kit_info': grpc.unary_unary_rpc_method_handler(
                    servicer.get_barcode_kit_info,
                    request_deserializer=minknow__api_dot_manager__pb2.GetBarcodeKitInfoRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.GetBarcodeKitInfoResponse.SerializeToString,
            ),
            'get_lamp_kit_info': grpc.unary_unary_rpc_method_handler(
                    servicer.get_lamp_kit_info,
                    request_deserializer=minknow__api_dot_manager__pb2.GetLampKitInfoRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.GetLampKitInfoResponse.SerializeToString,
            ),
            'get_barcode_keys': grpc.unary_unary_rpc_method_handler(
                    servicer.get_barcode_keys,
                    request_deserializer=minknow__api_dot_manager__pb2.GetBarcodeKeysRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.GetBarcodeKeysResponse.SerializeToString,
            ),
            'get_flow_cell_types': grpc.unary_unary_rpc_method_handler(
                    servicer.get_flow_cell_types,
                    request_deserializer=minknow__api_dot_manager__pb2.GetFlowCellTypesRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.GetFlowCellTypesResponse.SerializeToString,
            ),
            'get_sequencing_kits': grpc.unary_unary_rpc_method_handler(
                    servicer.get_sequencing_kits,
                    request_deserializer=minknow__api_dot_manager__pb2.GetSequencingKitsRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.GetSequencingKitsResponse.SerializeToString,
            ),
            'add_simulated_device': grpc.unary_unary_rpc_method_handler(
                    servicer.add_simulated_device,
                    request_deserializer=minknow__api_dot_manager__pb2.AddSimulatedDeviceRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.AddSimulatedDeviceResponse.SerializeToString,
            ),
            'remove_simulated_device': grpc.unary_unary_rpc_method_handler(
                    servicer.remove_simulated_device,
                    request_deserializer=minknow__api_dot_manager__pb2.RemoveSimulatedDeviceRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.RemoveSimulatedDeviceResponse.SerializeToString,
            ),
            'local_authentication_token_path': grpc.unary_unary_rpc_method_handler(
                    servicer.local_authentication_token_path,
                    request_deserializer=minknow__api_dot_manager__pb2.LocalAuthenticationTokenPathRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.LocalAuthenticationTokenPathResponse.SerializeToString,
            ),
            'get_alignment_reference_information': grpc.unary_unary_rpc_method_handler(
                    servicer.get_alignment_reference_information,
                    request_deserializer=minknow__api_dot_manager__pb2.GetAlignmentReferenceInformationRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.GetAlignmentReferenceInformationResponse.SerializeToString,
            ),
            'association_device_code': grpc.unary_unary_rpc_method_handler(
                    servicer.association_device_code,
                    request_deserializer=minknow__api_dot_manager__pb2.AssociationDeviceCodeRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.AssociationDeviceCodeResponse.SerializeToString,
            ),
            'apply_offline_association_unlock_code': grpc.unary_unary_rpc_method_handler(
                    servicer.apply_offline_association_unlock_code,
                    request_deserializer=minknow__api_dot_manager__pb2.ApplyOfflineAssociationUnlockCodeRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.ApplyOfflineAssociationUnlockCodeResponse.SerializeToString,
            ),
            'list_developer_api_tokens': grpc.unary_unary_rpc_method_handler(
                    servicer.list_developer_api_tokens,
                    request_deserializer=minknow__api_dot_manager__pb2.ListDeveloperApiTokensRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.ListDeveloperApiTokensResponse.SerializeToString,
            ),
            'create_developer_api_token': grpc.unary_unary_rpc_method_handler(
                    servicer.create_developer_api_token,
                    request_deserializer=minknow__api_dot_manager__pb2.CreateDeveloperApiTokenRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.CreateDeveloperApiTokenResponse.SerializeToString,
            ),
            'revoke_developer_api_token': grpc.unary_unary_rpc_method_handler(
                    servicer.revoke_developer_api_token,
                    request_deserializer=minknow__api_dot_manager__pb2.RevokeDeveloperApiTokenRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.RevokeDeveloperApiTokensResponse.SerializeToString,
            ),
            'find_protocols': grpc.unary_unary_rpc_method_handler(
                    servicer.find_protocols,
                    request_deserializer=minknow__api_dot_manager__pb2.FindProtocolsRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.FindProtocolsResponse.SerializeToString,
            ),
            'list_settings_for_protocol': grpc.unary_unary_rpc_method_handler(
                    servicer.list_settings_for_protocol,
                    request_deserializer=minknow__api_dot_manager__pb2.ListSettingsForProtocolRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.ListSettingsForProtocolResponse.SerializeToString,
            ),
            'get_features': grpc.unary_unary_rpc_method_handler(
                    servicer.get_features,
                    request_deserializer=minknow__api_dot_manager__pb2.GetFeaturesRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.GetFeaturesResponse.SerializeToString,
            ),
            'set_features': grpc.unary_unary_rpc_method_handler(
                    servicer.set_features,
                    request_deserializer=minknow__api_dot_manager__pb2.SetFeaturesRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.SetFeaturesResponse.SerializeToString,
            ),
            'restart_device_admin_service': grpc.unary_unary_rpc_method_handler(
                    servicer.restart_device_admin_service,
                    request_deserializer=minknow__api_dot_manager__pb2.RestartDeviceAdminRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.RestartDeviceAdminResponse.SerializeToString,
            ),
            'check_bed_file': grpc.unary_unary_rpc_method_handler(
                    servicer.check_bed_file,
                    request_deserializer=minknow__api_dot_manager__pb2.CheckBedFileRequest.FromString,
                    response_serializer=minknow__api_dot_manager__pb2.CheckBedFileResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'minknow_api.manager.ManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ManagerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def describe_host(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/describe_host',
            minknow__api_dot_manager__pb2.DescribeHostRequest.SerializeToString,
            minknow__api_dot_manager__pb2.DescribeHostResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_basecaller_features(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/get_basecaller_features',
            minknow__api_dot_manager__pb2.GetBasecallerFeaturesRequest.SerializeToString,
            minknow__api_dot_manager__pb2.GetBasecallerFeaturesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def flow_cell_positions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/minknow_api.manager.ManagerService/flow_cell_positions',
            minknow__api_dot_manager__pb2.FlowCellPositionsRequest.SerializeToString,
            minknow__api_dot_manager__pb2.FlowCellPositionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def watch_flow_cell_positions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/minknow_api.manager.ManagerService/watch_flow_cell_positions',
            minknow__api_dot_manager__pb2.WatchFlowCellPositionsRequest.SerializeToString,
            minknow__api_dot_manager__pb2.WatchFlowCellPositionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def reset_position(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/reset_position',
            minknow__api_dot_manager__pb2.ResetPositionRequest.SerializeToString,
            minknow__api_dot_manager__pb2.ResetPositionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def basecaller_api(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/basecaller_api',
            minknow__api_dot_manager__pb2.BasecallerApiRequest.SerializeToString,
            minknow__api_dot_manager__pb2.BasecallerApiResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_guppy_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/get_guppy_info',
            minknow__api_dot_manager__pb2.GetGuppyInfoRequest.SerializeToString,
            minknow__api_dot_manager__pb2.GetGuppyInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_version_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/get_version_info',
            minknow__api_dot_manager__pb2.GetVersionInfoRequest.SerializeToString,
            minknow__api_dot_instance__pb2.GetVersionInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_protocol_output_dir_files(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/minknow_api.manager.ManagerService/list_protocol_output_dir_files',
            minknow__api_dot_manager__pb2.ListProtocolOutputDirFilesRequest.SerializeToString,
            minknow__api_dot_manager__pb2.ListProtocolOutputDirFilesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_directory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/create_directory',
            minknow__api_dot_manager__pb2.CreateDirectoryRequest.SerializeToString,
            minknow__api_dot_manager__pb2.CreateDirectoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_disk_space_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/get_disk_space_info',
            minknow__api_dot_manager__pb2.GetDiskSpaceInfoRequest.SerializeToString,
            minknow__api_dot_manager__pb2.GetDiskSpaceInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_default_output_directories(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/get_default_output_directories',
            minknow__api_dot_instance__pb2.GetDefaultOutputDirectoriesRequest.SerializeToString,
            minknow__api_dot_instance__pb2.OutputDirectories.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stream_disk_space_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/minknow_api.manager.ManagerService/stream_disk_space_info',
            minknow__api_dot_manager__pb2.StreamDiskSpaceInfoRequest.SerializeToString,
            minknow__api_dot_manager__pb2.GetDiskSpaceInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_barcode_kit_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/get_barcode_kit_info',
            minknow__api_dot_manager__pb2.GetBarcodeKitInfoRequest.SerializeToString,
            minknow__api_dot_manager__pb2.GetBarcodeKitInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_lamp_kit_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/get_lamp_kit_info',
            minknow__api_dot_manager__pb2.GetLampKitInfoRequest.SerializeToString,
            minknow__api_dot_manager__pb2.GetLampKitInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_barcode_keys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/get_barcode_keys',
            minknow__api_dot_manager__pb2.GetBarcodeKeysRequest.SerializeToString,
            minknow__api_dot_manager__pb2.GetBarcodeKeysResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_flow_cell_types(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/get_flow_cell_types',
            minknow__api_dot_manager__pb2.GetFlowCellTypesRequest.SerializeToString,
            minknow__api_dot_manager__pb2.GetFlowCellTypesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_sequencing_kits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/get_sequencing_kits',
            minknow__api_dot_manager__pb2.GetSequencingKitsRequest.SerializeToString,
            minknow__api_dot_manager__pb2.GetSequencingKitsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def add_simulated_device(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/add_simulated_device',
            minknow__api_dot_manager__pb2.AddSimulatedDeviceRequest.SerializeToString,
            minknow__api_dot_manager__pb2.AddSimulatedDeviceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remove_simulated_device(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/remove_simulated_device',
            minknow__api_dot_manager__pb2.RemoveSimulatedDeviceRequest.SerializeToString,
            minknow__api_dot_manager__pb2.RemoveSimulatedDeviceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def local_authentication_token_path(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/local_authentication_token_path',
            minknow__api_dot_manager__pb2.LocalAuthenticationTokenPathRequest.SerializeToString,
            minknow__api_dot_manager__pb2.LocalAuthenticationTokenPathResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_alignment_reference_information(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/get_alignment_reference_information',
            minknow__api_dot_manager__pb2.GetAlignmentReferenceInformationRequest.SerializeToString,
            minknow__api_dot_manager__pb2.GetAlignmentReferenceInformationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def association_device_code(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/association_device_code',
            minknow__api_dot_manager__pb2.AssociationDeviceCodeRequest.SerializeToString,
            minknow__api_dot_manager__pb2.AssociationDeviceCodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def apply_offline_association_unlock_code(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/apply_offline_association_unlock_code',
            minknow__api_dot_manager__pb2.ApplyOfflineAssociationUnlockCodeRequest.SerializeToString,
            minknow__api_dot_manager__pb2.ApplyOfflineAssociationUnlockCodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_developer_api_tokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/list_developer_api_tokens',
            minknow__api_dot_manager__pb2.ListDeveloperApiTokensRequest.SerializeToString,
            minknow__api_dot_manager__pb2.ListDeveloperApiTokensResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_developer_api_token(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/create_developer_api_token',
            minknow__api_dot_manager__pb2.CreateDeveloperApiTokenRequest.SerializeToString,
            minknow__api_dot_manager__pb2.CreateDeveloperApiTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def revoke_developer_api_token(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/revoke_developer_api_token',
            minknow__api_dot_manager__pb2.RevokeDeveloperApiTokenRequest.SerializeToString,
            minknow__api_dot_manager__pb2.RevokeDeveloperApiTokensResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def find_protocols(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/find_protocols',
            minknow__api_dot_manager__pb2.FindProtocolsRequest.SerializeToString,
            minknow__api_dot_manager__pb2.FindProtocolsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_settings_for_protocol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/list_settings_for_protocol',
            minknow__api_dot_manager__pb2.ListSettingsForProtocolRequest.SerializeToString,
            minknow__api_dot_manager__pb2.ListSettingsForProtocolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_features(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/get_features',
            minknow__api_dot_manager__pb2.GetFeaturesRequest.SerializeToString,
            minknow__api_dot_manager__pb2.GetFeaturesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_features(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/set_features',
            minknow__api_dot_manager__pb2.SetFeaturesRequest.SerializeToString,
            minknow__api_dot_manager__pb2.SetFeaturesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def restart_device_admin_service(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/restart_device_admin_service',
            minknow__api_dot_manager__pb2.RestartDeviceAdminRequest.SerializeToString,
            minknow__api_dot_manager__pb2.RestartDeviceAdminResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check_bed_file(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.manager.ManagerService/check_bed_file',
            minknow__api_dot_manager__pb2.CheckBedFileRequest.SerializeToString,
            minknow__api_dot_manager__pb2.CheckBedFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
