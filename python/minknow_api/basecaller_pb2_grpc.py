# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from minknow_api import basecaller_pb2 as minknow__api_dot_basecaller__pb2


class BasecallerStub(object):
    """Basecall reads files from previous sequencing runs.

    NB: this is not available from a MinKNOW device instance. It should be accessed on its own
    connection, using one of the ports provided by the
    minknow_api.manager.ManagerService.basecaller_api() method.

    Since 3.5
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.list_configs_by_kit = channel.unary_unary(
                '/minknow_api.basecaller.Basecaller/list_configs_by_kit',
                request_serializer=minknow__api_dot_basecaller__pb2.ListConfigsByKitRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.ListConfigsByKitResponse.FromString,
                )
        self.start_basecalling = channel.unary_unary(
                '/minknow_api.basecaller.Basecaller/start_basecalling',
                request_serializer=minknow__api_dot_basecaller__pb2.StartBasecallingRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.StartBasecallingResponse.FromString,
                )
        self.start_barcoding = channel.unary_unary(
                '/minknow_api.basecaller.Basecaller/start_barcoding',
                request_serializer=minknow__api_dot_basecaller__pb2.StartBarcodingRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.StartBarcodingResponse.FromString,
                )
        self.start_post_processing_protocol = channel.unary_unary(
                '/minknow_api.basecaller.Basecaller/start_post_processing_protocol',
                request_serializer=minknow__api_dot_basecaller__pb2.StartPostProcessingProtocolRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.StartPostProcessingProtocolResponse.FromString,
                )
        self.start_alignment = channel.unary_unary(
                '/minknow_api.basecaller.Basecaller/start_alignment',
                request_serializer=minknow__api_dot_basecaller__pb2.StartAlignmentRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.StartAlignmentResponse.FromString,
                )
        self.cancel = channel.unary_unary(
                '/minknow_api.basecaller.Basecaller/cancel',
                request_serializer=minknow__api_dot_basecaller__pb2.CancelRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.CancelResponse.FromString,
                )
        self.get_info = channel.unary_stream(
                '/minknow_api.basecaller.Basecaller/get_info',
                request_serializer=minknow__api_dot_basecaller__pb2.GetInfoRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.GetInfoResponse.FromString,
                )
        self.clear_info = channel.unary_unary(
                '/minknow_api.basecaller.Basecaller/clear_info',
                request_serializer=minknow__api_dot_basecaller__pb2.ClearInfoRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.ClearInfoResponse.FromString,
                )
        self.watch = channel.unary_stream(
                '/minknow_api.basecaller.Basecaller/watch',
                request_serializer=minknow__api_dot_basecaller__pb2.WatchRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.WatchResponse.FromString,
                )
        self.make_alignment_index = channel.unary_unary(
                '/minknow_api.basecaller.Basecaller/make_alignment_index',
                request_serializer=minknow__api_dot_basecaller__pb2.MakeAlignmentIndexRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.MakeAlignmentIndexResponse.FromString,
                )
        self.list_post_processing_protocols = channel.unary_unary(
                '/minknow_api.basecaller.Basecaller/list_post_processing_protocols',
                request_serializer=minknow__api_dot_basecaller__pb2.ListPostProcessingProtocolsRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.ListPostProcessingProtocolsResponse.FromString,
                )
        self.list_settings_for_post_processing_protocol = channel.unary_unary(
                '/minknow_api.basecaller.Basecaller/list_settings_for_post_processing_protocol',
                request_serializer=minknow__api_dot_basecaller__pb2.ListSettingsForPostProcessingProtocolRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.ListSettingsForPostProcessingProtocolResponse.FromString,
                )
        self.update_post_processing_protocol_progress = channel.unary_unary(
                '/minknow_api.basecaller.Basecaller/update_post_processing_protocol_progress',
                request_serializer=minknow__api_dot_basecaller__pb2.UpdateProgressRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.UpdateProgressResponse.FromString,
                )
        self.send_ping = channel.unary_unary(
                '/minknow_api.basecaller.Basecaller/send_ping',
                request_serializer=minknow__api_dot_basecaller__pb2.SendPingRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.SendPingResponse.FromString,
                )


class BasecallerServicer(object):
    """Basecall reads files from previous sequencing runs.

    NB: this is not available from a MinKNOW device instance. It should be accessed on its own
    connection, using one of the ports provided by the
    minknow_api.manager.ManagerService.basecaller_api() method.

    Since 3.5
    """

    def list_configs_by_kit(self, request, context):
        """List the available basecalling configurations sorted by flow cell and kit.

        Since 3.5

        DEPRECATED: This rpc is no longer supported and does not return any results.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start_basecalling(self, request, context):
        """Start basecalling reads files.

        Since 4.0
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start_barcoding(self, request, context):
        """Start barcoding fastq files.

        Since 3.8
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start_post_processing_protocol(self, request, context):
        """Start an post processing analysis protocol.

        Post processing protocols allow processing already generated sequencing files in some way, eg: running an
        ARTIC workflow on some fastq files, or barcoding a set of fastq input files.

        Since 4.4
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start_alignment(self, request, context):
        """Start aligning fastq files.

        Since 3.8
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cancel(self, request, context):
        """Stop a basecalling that was started by start_basecalling_reads().

        Since 3.5
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_info(self, request, context):
        """Gets information about one or more basecalling operations.

        Since 3.5
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def clear_info(self, request, context):
        """Clears run info data for each analysis specified

        Run info data is the data returned by `get_info()`.

        Also clears any persistence data that has been written to disk for those analyses -- this
        data will not be available after a restart.

        Run info will not be cleared for analyses which are still in-progress. If an invalid or
        in-progress analysis id is specified, that analysis id is ignored.

        Does NOT clear results from analyses (e.g. bam files, reports, etc.)

        Since 5.9

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def watch(self, request, context):
        """Monitors basecalls, returning messages when basecalls are started, stopped or receive
        progress updates.

        The current state of all currently-running basecalls will be returned in the initial set of
        messages. Optionally, the state of all already-finished runs can be included. Note that this
        initial state may be split among several responses.

        Note that progress updates may be rate limited to avoid affecting performance.

        Since 3.5
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def make_alignment_index(self, request, context):
        """Build an alignment index file from an input fasta reference.

        This call blocks whilst the index is built.

        Since 4.3
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_post_processing_protocols(self, request, context):
        """Gives back a list that contains info about each possible post processing protocol script minknow is aware of.
        This will most likely be used to retrieve a suitable post processing protocol script that can be passed on to `start_post_processing_protocol`

        Since 4.4
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_settings_for_post_processing_protocol(self, request, context):
        """Find available display settings for an post processing protocol

        Since 4.4
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_post_processing_protocol_progress(self, request, context):
        """Set the progress of the currently executing post processing protocol (this API expects a run_id as more than one can be active).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_ping(self, request, context):
        """Send a ping to the configured ping server (see system config for ping server url)

        The tracking_id and context_data section of the ping are filled in automatically by the basecall manager.

        The ping is queued internally for sending immediately, if the basecall manager fails to send the message it
        stores the message to send when possible.

        Since 5.0
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BasecallerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'list_configs_by_kit': grpc.unary_unary_rpc_method_handler(
                    servicer.list_configs_by_kit,
                    request_deserializer=minknow__api_dot_basecaller__pb2.ListConfigsByKitRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.ListConfigsByKitResponse.SerializeToString,
            ),
            'start_basecalling': grpc.unary_unary_rpc_method_handler(
                    servicer.start_basecalling,
                    request_deserializer=minknow__api_dot_basecaller__pb2.StartBasecallingRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.StartBasecallingResponse.SerializeToString,
            ),
            'start_barcoding': grpc.unary_unary_rpc_method_handler(
                    servicer.start_barcoding,
                    request_deserializer=minknow__api_dot_basecaller__pb2.StartBarcodingRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.StartBarcodingResponse.SerializeToString,
            ),
            'start_post_processing_protocol': grpc.unary_unary_rpc_method_handler(
                    servicer.start_post_processing_protocol,
                    request_deserializer=minknow__api_dot_basecaller__pb2.StartPostProcessingProtocolRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.StartPostProcessingProtocolResponse.SerializeToString,
            ),
            'start_alignment': grpc.unary_unary_rpc_method_handler(
                    servicer.start_alignment,
                    request_deserializer=minknow__api_dot_basecaller__pb2.StartAlignmentRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.StartAlignmentResponse.SerializeToString,
            ),
            'cancel': grpc.unary_unary_rpc_method_handler(
                    servicer.cancel,
                    request_deserializer=minknow__api_dot_basecaller__pb2.CancelRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.CancelResponse.SerializeToString,
            ),
            'get_info': grpc.unary_stream_rpc_method_handler(
                    servicer.get_info,
                    request_deserializer=minknow__api_dot_basecaller__pb2.GetInfoRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.GetInfoResponse.SerializeToString,
            ),
            'clear_info': grpc.unary_unary_rpc_method_handler(
                    servicer.clear_info,
                    request_deserializer=minknow__api_dot_basecaller__pb2.ClearInfoRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.ClearInfoResponse.SerializeToString,
            ),
            'watch': grpc.unary_stream_rpc_method_handler(
                    servicer.watch,
                    request_deserializer=minknow__api_dot_basecaller__pb2.WatchRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.WatchResponse.SerializeToString,
            ),
            'make_alignment_index': grpc.unary_unary_rpc_method_handler(
                    servicer.make_alignment_index,
                    request_deserializer=minknow__api_dot_basecaller__pb2.MakeAlignmentIndexRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.MakeAlignmentIndexResponse.SerializeToString,
            ),
            'list_post_processing_protocols': grpc.unary_unary_rpc_method_handler(
                    servicer.list_post_processing_protocols,
                    request_deserializer=minknow__api_dot_basecaller__pb2.ListPostProcessingProtocolsRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.ListPostProcessingProtocolsResponse.SerializeToString,
            ),
            'list_settings_for_post_processing_protocol': grpc.unary_unary_rpc_method_handler(
                    servicer.list_settings_for_post_processing_protocol,
                    request_deserializer=minknow__api_dot_basecaller__pb2.ListSettingsForPostProcessingProtocolRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.ListSettingsForPostProcessingProtocolResponse.SerializeToString,
            ),
            'update_post_processing_protocol_progress': grpc.unary_unary_rpc_method_handler(
                    servicer.update_post_processing_protocol_progress,
                    request_deserializer=minknow__api_dot_basecaller__pb2.UpdateProgressRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.UpdateProgressResponse.SerializeToString,
            ),
            'send_ping': grpc.unary_unary_rpc_method_handler(
                    servicer.send_ping,
                    request_deserializer=minknow__api_dot_basecaller__pb2.SendPingRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.SendPingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'minknow_api.basecaller.Basecaller', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Basecaller(object):
    """Basecall reads files from previous sequencing runs.

    NB: this is not available from a MinKNOW device instance. It should be accessed on its own
    connection, using one of the ports provided by the
    minknow_api.manager.ManagerService.basecaller_api() method.

    Since 3.5
    """

    @staticmethod
    def list_configs_by_kit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.basecaller.Basecaller/list_configs_by_kit',
            minknow__api_dot_basecaller__pb2.ListConfigsByKitRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.ListConfigsByKitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def start_basecalling(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.basecaller.Basecaller/start_basecalling',
            minknow__api_dot_basecaller__pb2.StartBasecallingRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.StartBasecallingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def start_barcoding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.basecaller.Basecaller/start_barcoding',
            minknow__api_dot_basecaller__pb2.StartBarcodingRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.StartBarcodingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def start_post_processing_protocol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.basecaller.Basecaller/start_post_processing_protocol',
            minknow__api_dot_basecaller__pb2.StartPostProcessingProtocolRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.StartPostProcessingProtocolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def start_alignment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.basecaller.Basecaller/start_alignment',
            minknow__api_dot_basecaller__pb2.StartAlignmentRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.StartAlignmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.basecaller.Basecaller/cancel',
            minknow__api_dot_basecaller__pb2.CancelRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.CancelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/minknow_api.basecaller.Basecaller/get_info',
            minknow__api_dot_basecaller__pb2.GetInfoRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.GetInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def clear_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.basecaller.Basecaller/clear_info',
            minknow__api_dot_basecaller__pb2.ClearInfoRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.ClearInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def watch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/minknow_api.basecaller.Basecaller/watch',
            minknow__api_dot_basecaller__pb2.WatchRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.WatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def make_alignment_index(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.basecaller.Basecaller/make_alignment_index',
            minknow__api_dot_basecaller__pb2.MakeAlignmentIndexRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.MakeAlignmentIndexResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_post_processing_protocols(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.basecaller.Basecaller/list_post_processing_protocols',
            minknow__api_dot_basecaller__pb2.ListPostProcessingProtocolsRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.ListPostProcessingProtocolsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_settings_for_post_processing_protocol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.basecaller.Basecaller/list_settings_for_post_processing_protocol',
            minknow__api_dot_basecaller__pb2.ListSettingsForPostProcessingProtocolRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.ListSettingsForPostProcessingProtocolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_post_processing_protocol_progress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.basecaller.Basecaller/update_post_processing_protocol_progress',
            minknow__api_dot_basecaller__pb2.UpdateProgressRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.UpdateProgressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send_ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.basecaller.Basecaller/send_ping',
            minknow__api_dot_basecaller__pb2.SendPingRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.SendPingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
