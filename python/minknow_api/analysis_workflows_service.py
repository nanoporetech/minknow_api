### THIS FILE IS AUTOGENERATED. DO NOT EDIT THIS FILE DIRECTLY ###
import minknow_api
from minknow_api.analysis_workflows_pb2_grpc import *
import minknow_api.analysis_workflows_pb2 as analysis_workflows_pb2
from minknow_api.analysis_workflows_pb2 import *
from minknow_api._support import MessageWrapper, ArgumentError
import time
import logging
import sys

__all__ = [
    "AnalysisWorkflowsService",
    "ProxyRequest",
    "ProxyResponse",
]

def run_with_retry(method, message, timeout, unwraps, full_name):
    retry_count = 20
    error = None
    for i in range(retry_count):
        try:
            result = MessageWrapper(method(message, timeout=timeout), unwraps=unwraps)
            return result
        except grpc.RpcError as e:
            # Retrying unidentified grpc errors to keep clients from crashing
            retryable_error = (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details() or \
                                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()))
            if retryable_error:
                logging.info('Bypassed ({}: {}) error for grpc: {}. Attempt {}.'.format(e.code(), e.details(), full_name, i))
            else:
                raise
            error = e
        time.sleep(1)
    raise error


class AnalysisWorkflowsService(object):
    def __init__(self, channel):
        self._stub = AnalysisWorkflowsServiceStub(channel)
        self._pb = analysis_workflows_pb2
    def proxy(self, _message=None, _timeout=None, **kwargs):
        """

        

        Note this API is experimental - it may be changed, revised or removed in future minor versions.

        Args:
            _message (minknow_api.analysis_workflows_pb2.ProxyRequest, optional): The message to send.
                This can be passed instead of the keyword arguments.
            _timeout (float, optional): The call will be cancelled after this number of seconds
                if it has not been completed.
                Note that this is the time until the call ends, not the time between returned
                messages.
            api (str, optional): with parameters but without the endpoint e.g.  for API /workflows/{id}/start:
                "/workflows/ae088129-8767-460f-8795-7c04771dc42f/start"
                "/workflows/epi2me-labs/wf-alignment/v1.2.8/start"
            method (minknow_api.analysis_workflows_pb2.ProxyRequest.Method, optional): 
            headers (minknow_api.analysis_workflows_pb2.ProxyRequest.HeadersEntry, optional): 
            request_body (str, optional): 

        Returns:
            iter of minknow_api.analysis_workflows_pb2.ProxyResponse

        Note that the returned messages are actually wrapped in a type that collapses
        submessages for fields marked with ``[rpc_unwrap]``.
        """
        print("Warning: Method AnalysisWorkflowsService.proxy is experimental and may be changed, revised or removed in future minor versions.", file=sys.stderr)
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.proxy,
                                  _message, _timeout,
                                  [],
                                  "minknow_api.analysis_workflows.AnalysisWorkflowsService")

        unused_args = set(kwargs.keys())

        _message = ProxyRequest()

        if "api" in kwargs:
            unused_args.remove("api")
            _message.api = kwargs['api']

        if "method" in kwargs:
            unused_args.remove("method")
            _message.method = kwargs['method']

        if "headers" in kwargs:
            unused_args.remove("headers")
            _message.headers.update(kwargs['headers'])
            

        if "request_body" in kwargs:
            unused_args.remove("request_body")
            _message.request_body = kwargs['request_body']

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to proxy: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.proxy,
                              _message, _timeout,
                              [],
                              "minknow_api.analysis_workflows.AnalysisWorkflowsService")
