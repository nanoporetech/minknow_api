# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from minknow_api import protocol_pb2 as minknow__api_dot_protocol__pb2
from minknow_api.v2 import protocols_pb2 as minknow__api_dot_v2_dot_protocols__pb2


class ProtocolsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.begin_protocols = channel.unary_unary(
                '/minknow_api.v2.protocol.ProtocolsService/begin_protocols',
                request_serializer=minknow__api_dot_v2_dot_protocols__pb2.BeginProtocolsRequest.SerializeToString,
                response_deserializer=minknow__api_dot_v2_dot_protocols__pb2.BeginProtocolsResponse.FromString,
                )
        self.start_protocols = channel.unary_unary(
                '/minknow_api.v2.protocol.ProtocolsService/start_protocols',
                request_serializer=minknow__api_dot_v2_dot_protocols__pb2.StartProtocolsRequest.SerializeToString,
                response_deserializer=minknow__api_dot_v2_dot_protocols__pb2.StartProtocolsResponse.FromString,
                )
        self.stop_protocols = channel.unary_unary(
                '/minknow_api.v2.protocol.ProtocolsService/stop_protocols',
                request_serializer=minknow__api_dot_v2_dot_protocols__pb2.StopProtocolsRequest.SerializeToString,
                response_deserializer=minknow__api_dot_v2_dot_protocols__pb2.StopProtocolsResponse.FromString,
                )
        self.get_run_info = channel.unary_unary(
                '/minknow_api.v2.protocol.ProtocolsService/get_run_info',
                request_serializer=minknow__api_dot_protocol__pb2.GetRunInfoRequest.SerializeToString,
                response_deserializer=minknow__api_dot_protocol__pb2.ProtocolRunInfo.FromString,
                )
        self.list_protocol_runs = channel.unary_unary(
                '/minknow_api.v2.protocol.ProtocolsService/list_protocol_runs',
                request_serializer=minknow__api_dot_protocol__pb2.ListProtocolRunsRequest.SerializeToString,
                response_deserializer=minknow__api_dot_protocol__pb2.ListProtocolRunsResponse.FromString,
                )


class ProtocolsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def begin_protocols(self, request, context):
        """Run a protocol on the connected flow cell.

        The protocol must be described by a TOML file. The request identifies the
        protocol and supplies overrides to the default protocol-settings described
        in the TOML file, in addition it provides user-info for the experiment.

        This will return an error if one or more of the sub-requests' flow cell identification information is invalid.
        Otherwise, will return OK, even if any of the sub-requests fail.

        If a sub-request fails, this will be indicated by the individual response's 'status' field being set.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start_protocols(self, request, context):
        """Initiates a python instance that runs the script specified by the `path` argument.
        `list_protocols` will give back a list of protocol scripts that can be started by this call

        This will return an error if one or more of the sub-requests' flow cell identification information is invalid.
        Otherwise, will return OK, even if any of the sub-requests fail.

        If a sub-request fails, this will be indicated by the individual response's 'status' field being set.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stop_protocols(self, request, context):
        """Stops the named protocols.

        This will return an error if one or more of the sub-requests' run IDs does not correspond to a currently running experiment.
        Otherwise, will return OK, even if any of the sub-requests fail.

        If a sub-request fails, this will be indicated by the individual response's 'status' field being set.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_run_info(self, request, context):
        """Gets information about a protocol run.

        If no run ID is provided, information about the most recently started protocol run is
        provided.

        Since 6.5
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_protocol_runs(self, request, context):
        """List previously started protocol run ids (including any current protocol), in order of starting.

        The returned object can be used to find protocol information with get_run_info.

        Since 6.5
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProtocolsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'begin_protocols': grpc.unary_unary_rpc_method_handler(
                    servicer.begin_protocols,
                    request_deserializer=minknow__api_dot_v2_dot_protocols__pb2.BeginProtocolsRequest.FromString,
                    response_serializer=minknow__api_dot_v2_dot_protocols__pb2.BeginProtocolsResponse.SerializeToString,
            ),
            'start_protocols': grpc.unary_unary_rpc_method_handler(
                    servicer.start_protocols,
                    request_deserializer=minknow__api_dot_v2_dot_protocols__pb2.StartProtocolsRequest.FromString,
                    response_serializer=minknow__api_dot_v2_dot_protocols__pb2.StartProtocolsResponse.SerializeToString,
            ),
            'stop_protocols': grpc.unary_unary_rpc_method_handler(
                    servicer.stop_protocols,
                    request_deserializer=minknow__api_dot_v2_dot_protocols__pb2.StopProtocolsRequest.FromString,
                    response_serializer=minknow__api_dot_v2_dot_protocols__pb2.StopProtocolsResponse.SerializeToString,
            ),
            'get_run_info': grpc.unary_unary_rpc_method_handler(
                    servicer.get_run_info,
                    request_deserializer=minknow__api_dot_protocol__pb2.GetRunInfoRequest.FromString,
                    response_serializer=minknow__api_dot_protocol__pb2.ProtocolRunInfo.SerializeToString,
            ),
            'list_protocol_runs': grpc.unary_unary_rpc_method_handler(
                    servicer.list_protocol_runs,
                    request_deserializer=minknow__api_dot_protocol__pb2.ListProtocolRunsRequest.FromString,
                    response_serializer=minknow__api_dot_protocol__pb2.ListProtocolRunsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'minknow_api.v2.protocol.ProtocolsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProtocolsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def begin_protocols(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.v2.protocol.ProtocolsService/begin_protocols',
            minknow__api_dot_v2_dot_protocols__pb2.BeginProtocolsRequest.SerializeToString,
            minknow__api_dot_v2_dot_protocols__pb2.BeginProtocolsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def start_protocols(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.v2.protocol.ProtocolsService/start_protocols',
            minknow__api_dot_v2_dot_protocols__pb2.StartProtocolsRequest.SerializeToString,
            minknow__api_dot_v2_dot_protocols__pb2.StartProtocolsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stop_protocols(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.v2.protocol.ProtocolsService/stop_protocols',
            minknow__api_dot_v2_dot_protocols__pb2.StopProtocolsRequest.SerializeToString,
            minknow__api_dot_v2_dot_protocols__pb2.StopProtocolsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_run_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.v2.protocol.ProtocolsService/get_run_info',
            minknow__api_dot_protocol__pb2.GetRunInfoRequest.SerializeToString,
            minknow__api_dot_protocol__pb2.ProtocolRunInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_protocol_runs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.v2.protocol.ProtocolsService/list_protocol_runs',
            minknow__api_dot_protocol__pb2.ListProtocolRunsRequest.SerializeToString,
            minknow__api_dot_protocol__pb2.ListProtocolRunsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
