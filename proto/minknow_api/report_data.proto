syntax="proto3";

package minknow_api.report_data;
option go_package ="github.com/nanoporetech/minknow_api/go/gen/report_data";

import "minknow_api/acquisition.proto";
import "minknow_api/analysis_configuration.proto";
import "minknow_api/device.proto";
import "minknow_api/hardware_check.proto";
import "minknow_api/log.proto";
import "minknow_api/manager.proto";
import "minknow_api/protocol.proto";
import "minknow_api/run_until.proto";
import "minknow_api/statistics.proto";

import "google/protobuf/timestamp.proto";


enum AcquisitionOutputTypes {
    AllData = 0;
    SplitByBarcodeAndAlignment = 1;
    SplitByBarcode = 2;
    SplitByAlignment = 3;
    SplitByEndReason = 4;
    SplitByBedRegion = 5;
}

message AcquisitionOutput {
    AcquisitionOutputTypes type = 1;
    repeated statistics.StreamAcquisitionOutputResponse plot = 2;
}

message ReadLengthHistogram {
    statistics.ReadLengthType read_length_type = 1;
    statistics.BucketValueType bucket_value_type = 2;
    statistics.StreamReadLengthHistogramResponse plot = 3;
    statistics.StreamReadLengthHistogramResponse outliers = 4;
}

message BasecallBoxplot {
    statistics.StreamBoxplotRequest.BoxplotType type = 1;
    statistics.BoxplotResponse plot = 2;
}

message BasecallerInformation {
    // github.com/nanoporetech/dorado#decoding-dorado-model-names
    // Document what the model names are
    message DoradoModelName {
        string analyte_type = 1; // dna or rna
        string pore_type = 2; // 'r' followed by a version number
        string chemistry_type = 3; // 'e' followed by a version number
        string translocation_speed = 4; // <number>bps
        string model_type = 5; // Fast model, High-accuracy model or Super-accurate basecalling
        string model_version = 6; // version number/string
    }
    DoradoModelName dorado_model_name = 1;
    bool duplex_enabled = 7;

    // Each string presents all modifications for a modified model
    // Link for a list of all compatible mods
    // github.com/nanoporetech/dorado#decoding-dorado-model-names
    // Example format:
    // ["5mC in CG contexts", "5hmC & 5mC in CG contexts"]
    repeated string modifications = 3;
}

// This is spelt incorrectly (should be AcquisitionReportData)
message AcquistionReportData {
    // Information about the executed acquisition
    acquisition.AcquisitionRunInfo acquisition_run_info = 1;

    // Size of buckets for all statistics data, in minutes.
    int32 bucket_size = 2;

    // Statistics snapshots for the acquisition period.
    // Formatted into the same bucket size for all datatypes,
    // computed from the length of the experiment.
    repeated statistics.StreamDutyTimeResponse duty_time = 3;
    repeated statistics.StreamWriterOutputResponse writer_output = 4;
    repeated statistics.StreamTemperatureResponse temperature = 5;
    repeated statistics.StreamBiasVoltagesResponse bias_voltage = 6;

    repeated AcquisitionOutput acquisition_output = 7;

    repeated ReadLengthHistogram read_length_histogram = 8;

    repeated statistics.StreamQScoreHistogramResponse qscore_histograms = 11;

    repeated statistics.StreamQAccuracyHistogramResponse qaccuracy_histograms = 14;

    repeated BasecallBoxplot basecall_boxplot = 9;

    run_until.Update run_until_update = 10;

    // Information about the writer configuration
    //
    // Since 5.9
    analysis_configuration.WriterConfiguration writer_config = 12;

    // Information about the basecaller configuration
    //
    // Since 5.9
    analysis_configuration.BasecallerConfiguration basecaller_config = 13;

    BasecallerInformation basecaller_information = 15;
}

// This is a subset of the information available from the describe_host() call
message Host {
    string serial = 1;
    string product_name = 2;
}

message ReportData {
    // This field has been removed
    //
    // Since 5.6
    reserved 1;

    Host host = 2;

    // Information about the executed protocol.
    protocol.ProtocolRunInfo protocol_run_info = 3;

    // Information about the acquisitions that are a part of the protocol.
    repeated AcquistionReportData acquisitions = 4;

    // All the user messages from protocol start to protocol end.
    repeated log.UserMessage user_messages = 5;

    // The time at which the report data was generated (UTC)
    google.protobuf.Timestamp report_data_generation_time = 6;
}

// Information describing the sequencer and sequencing positions that the Hardware Check was run on
message SequencerInfo {
    // Device Type (e.g. MinION, PromethION)
    minknow_api.device.GetDeviceInfoResponse.DeviceType device_type = 1;

    string device_id = 2;

    message Position {
        // The id of the position.
        //
        // For MinIONs, this is the name of the MinION (eg: MN12345). For integrated positions,
        // this is the label for the position on the sequencer (eg: X1 for GridION, 1-A1-D1 for
        // PromethION).
        //
        // This corresponds to the `PositionCheckResult.position_id` in a given hardware check
        // result
        string position_id = 1;

        manager.FlowCellPosition.Location location = 2;
    };

    repeated Position positions = 3;
}

message HardwareCheckReportData {
    // Information about the sequencer the hardware check was run on
    //
    // SequencerInfo will only be included for those sequencers where hardware check results are
    // being reported for at least one position on the sequencer
    //
    repeated SequencerInfo sequencer_info = 1;

    hardware_check.HardwareCheckResult hardware_check_result = 2;
}
